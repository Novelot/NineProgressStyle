package com.novelot.progressdemo;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Rect;import android.view.SurfaceHolder;import android.view.SurfaceView;/** * Created by V on 2016/3/15. */public class Progress extends SurfaceView implements SurfaceHolder.Callback, Runnable {    /**     * 画笔对象     */    private Paint paint;    /**     * canvas对象     */    private Canvas canvas;    /**     * surfaceholder对象     */    private SurfaceHolder holder;    /**     * 标志位     */    private boolean flag = false;    /**     * 黑色线     */    private Bitmap blackline;    /**     * 白色线     */    private Bitmap whiteline;    /**     * 背景     */    private Bitmap background;    /**     * 亮点     */    private Bitmap light;    /**     * 刷新频率     */    private long delay = 100;    /**     * 热点的长度     */    private int clipx;    /**     * 进度条移动步长     */    private static final int foot = 10;    private onFinishLinstener ofl;    public Progress(Context context) {        super(context);        init();    }    private void init() {        holder = this.getHolder();        holder.addCallback(this);        paint = new Paint();        paint.setDither(true);        background = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);        blackline = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);        whiteline = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);        light = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);    }    public void surfaceCreated(SurfaceHolder holder) {        flag = true;        new Thread(this).start();    }    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {    }    public void surfaceDestroyed(SurfaceHolder holder) {        flag = false;    }    private void draw() {        try {            canvas = holder.lockCanvas();            synchronized (canvas) {                canvas.drawBitmap(background, 0, 0, paint);                canvas.drawColor(Color.BLACK);                canvas.drawBitmap(blackline, 20, 100, paint);                canvas.drawBitmap(light, 20 + clipx - foot, 100, paint);                canvas.clipRect(new Rect(20, 100, 20 + clipx, 100 + light.getHeight()));                canvas.drawBitmap(whiteline, 20, 100, paint);            }        } finally {            if (canvas != null) {                holder.unlockCanvasAndPost(canvas);            }        }    }    public void run() {        while (flag && !Thread.currentThread().isInterrupted()) {            if (clipx >= blackline.getWidth()) {                clipx = blackline.getWidth();                //此处考虑去掉亮点，可以自己定义去掉时的clipx                flag = false;                if (ofl != null) {                    ofl.onSetFinishLinstener();                }            } else {                clipx += foot;            }            System.out.println("---" + clipx);            draw();            try {                Thread.sleep(delay);            } catch (Exception e) {                e.printStackTrace();                Thread.currentThread().interrupt();            }        }    }    public void setOnFinishLinstener(onFinishLinstener ofl) {        this.ofl = ofl;    }    public interface onFinishLinstener {        public void onSetFinishLinstener();    }}